///
/// @file
/// @brief  地名解決API（インタフェース）の定義
/// @author 株式会社情報試作室
///
/// Copyright (c)2013, NII
///

#ifndef _GEONLP_SERVICE_H
#define _GEONLP_SERVICE_H

#include "config.h"
#include <vector>
#include <map>
#include <boost/shared_ptr.hpp>
#include "Geoword.h"
#include "Dictionary.h"
#include "Address.h"
#include "GeonlpMA.h"
#include "Exception.h"
#include "picojsonExt.h"

#ifdef USE_DAMS
#include "DamsWrapper.h"
#include "DamsException.h"
#endif /* USE_DAMS */

namespace geonlp
{
  /// @brief Service のインタフェース定義
  class Service {
  private:
    MAPtr _ma_ptr;

  protected:
    /// @brief オプションをセットする
    /// @arg @c option_json_str  オプション指定JSON文字列
    /// @return なし
    /// @exception PicojsonException  オプション json 解析処理時のエラー
    /// ToDo: 未実装
    void set_options(const std::string& option_json_str) throw (picojson::PicojsonException);

    /// @brief  コンテキスト情報をリセットする
    /// @arg    なし
    /// @return なし
    /// ToDo: 未実装
    void reset_context(void) {};
    
    /// @brief １文を現在のコンテキスト、オプションのままで解析する
    /// @arg @c sentence  解析する自然言語文
    /// @return 解析結果の JSON オブジェクトの配列
    picojson::value parse_sentence(const std::string& sentence) const;
    
  public:
    // コンストラクタ
    Service(MAPtr maptr) { this->_ma_ptr = maptr; }

    // 拡張形態素解析器 (MA）インタフェースの取得
    inline MAPtr getMA(void) const { return this->_ma_ptr; }

    /// @brief 自然言語文を解析し、地名語を抽出した結果を返す
    /// @arg @c sentence  解析する自然言語文
    /// @arg @c option_json_str 処理オプションを指定する JSON 文字列
    /// @return 解析結果の JSON オブジェクトの配列
    /// @exception PicojsonException  オプション json 解析処理時のエラー
    picojson::value parse(const std::string& sentence, const std::string& option_json_str = "{}") throw (picojson::PicojsonException);

    /// @brief 複数の自然言語文を解析し、地名語を抽出した結果を返す（コンテキスト非依存）
    /// @arg @c sentences  解析する自然言語文の配列
    /// @arg @c option_json_str 処理オプションを指定する JSON 文字列
    /// @return 解析結果の JSON オブジェクトの配列
    /// @exception PicojsonException  オプション json 解析処理時のエラー
    picojson::value parse(const std::vector<std::string>& sentences, const std::string& option_json_str = "{}") throw (picojson::PicojsonException);

    /// @brief 他のタグ付け器等で構造化されているテキスト、または一連のテキストのジオパース
    ///        コンテキストは相互に影響する
    /// @arg @c sentences  解析する自然言語文の配列
    /// @arg @c option_json_str 処理オプションを指定する JSON 文字列
    /// @return 解析結果の JSON オブジェクト
    /// @exception PicojsonException  json 解析処理時のエラー
    picojson::value parseStructured(const std::vector<std::string>& sentences, const std::string& option_json_str = "{}") throw (picojson::PicojsonException);

    /// @brief geonlp_id から地名語の詳細情報を取得する
    /// @arg @c geonlp_id
    /// @return 検索結果, 見つからなかった場合は isValid() で false を返す
    picojson::value getGeoInfo(const std::string& geonlp_id) const;
    
    /// @brief geonlp_id から地名語の詳細情報を取得する
    /// @arg @c geonlp_ids  geonlp_id の配列
    /// @return 検索結果の配列
    picojson::value getGeoInfo(const std::vector<std::string>& geonlp_ids) const;
    
    /// @brief 利用可能な辞書一覧を取得する
    /// @arg なし
    /// @return 辞書の配列
    picojson::value getDictionaries(void) const;

    /// @brief 指定した辞書に関する詳細情報を取得する
    /// @arg @c dictionary_id   詳細情報が必要な辞書ID
    /// @return 辞書のIDをキー、辞書の詳細情報を値とするマップ
    picojson::value getDictionaryInfo(int dictionary_id) const;

    /// @brief 指定した辞書に関する詳細情報を取得する
    /// @arg @c dictionary_ids   詳細情報が必要な辞書IDの配列
    /// @return 辞書のIDをキー、辞書の詳細情報を値とするマップ
    picojson::value getDictionaryInfo(const std::vector<int>& dictionary_ids) const;

    /// @brief 利用可能なコード体系の一覧を取得する
    /// @arg @c pattern  検索対象となるコード体系の正規表現
    /// @return 正規表現に一致するコード体系の一覧
    picojson::value getCodeKeys(const std::string& pattern) const;

    /// @brief  コード体系とコード値を含む地名語の情報を取得する
    /// @arg @c code-pairs      コード体系, コード値のペアの配列
    /// @arg @c option_json_str 処理オプションを指定する JSON 文字列
    /// @return コード体系、コード値を含む地名語の配列
    /// @exception PicojsonException  json 解析処理時のエラー
    picojson::value getGeoFromCodes(const std::vector<std::pair<std::string, std::string> >& codepairs, const std::string& option_json_str) const
      throw (picojson::PicojsonException);

    /// @brief  住所をジオコーディングする
    /// @arg @c address 住所文字列
    /// @return 住所情報
    /// @exception PicojsonException  json 解析処理時のエラー
    Address addressGeocoding(const std::string& address) const;
  }; /* class Service */

  // Service へのポインタ
  typedef boost::shared_ptr<Service> ServicePtr;

  /// @brief Service への共有ポインタ取得する
  /// @arg @c profile プロファイル名
  /// @exception ServiceCreateFailedException  ポインタ取得失敗
  ServicePtr createService(const std::string& profile) throw (ServiceCreateFailedException);

}

#endif /* _GEONLP_SERVICE_H */
